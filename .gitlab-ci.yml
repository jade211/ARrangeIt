include:
  - template: Android.gitlab-ci.yml

variables:
  ANDROID_SDK: "34"
  ANDROID_BUILD_TOOLS: "34.0.0"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"


before_script:
  - cd src/ARrangeIt
  - apt-get update -y
  - apt-get install -y unzip wget tar curl lib32stdc++6 lib32z1
  - export ANDROID_HOME="${PWD}/android-home"
  - mkdir -p "$ANDROID_HOME"
  - wget -O $ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip
  - cd $ANDROID_HOME
  - unzip -d cmdline-tools cmdline-tools.zip
  - rm cmdline-tools.zip
  - cd cmdline-tools
  - mv cmdline-tools latest 
  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/latest/bin/ 
  - ls ${ANDROID_HOME}/cmdline-tools/latest/bin/  
  - yes | sdkmanager --licenses || true
  - sdkmanager "platforms;android-${ANDROID_SDK}"
  - sdkmanager "platform-tools"
  - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"
  - sdkmanager "emulator"
  - sdkmanager "system-images;android-${ANDROID_SDK};google_apis;x86_64"
  - cd ..
  - cd ..
  - chmod +x ./gradlew  # Ensure Gradle wrapper is executable

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:
  stage: build
  script:
    - ./gradlew assembleDebug 
    - ls -R app/build/outputs/
  artifacts:
    when: always
    paths:
      - src/ARrangeIt/app/build/outputs/**
      - app/build/outputs/apk/debug/
      - app/build/outputs/apk/androidTest/debug/


# lint-job:
#   stage: build
#   script:
#     - ./gradlew lintDebug
#   artifacts:
#     paths:
#       - src/ARrangeIt/app/build/reports/lint/**

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - ./gradlew testDebug
    - ls -R app/build/test-results/testDebugUnitTest/  
  artifacts:
    when: always
    paths:
      - src/ARrangeIt/app/build/test-results/testDebugUnitTest/**


ui-test-job:
  stage: test
  script:
    - which emulator
    - which adb
    - emulator -version
    - adb version

    - echo "Creating AVD..."
    - avdmanager create avd -n test -k "system-images;android-${ANDROID_SDK};google_apis;x86_64" -d pixel_4 --force
    - nohup emulator -avd test -no-audio -no-window -no-snapshot -gpu swiftshader_indirect -no-boot-anim -accel auto &
    - adb wait-for-device
    
    - echo "Waiting for emulator to boot..."
    - adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'
    - adb shell settings put global window_animation_scale 0
    - adb shell settings put global transition_animation_scale 0
    - adb shell settings put global animator_duration_scale 0
    
    # Run tests
    - echo "Running UI tests..."
    - ./gradlew connectedAndroidTest
    
    # Collect results
    - ls -R app/build/reports/
  artifacts:
    when: always
    paths:
      - app/build/reports/androidTests/connected/
      - app/build/outputs/androidTest-results/
    reports:
      junit: app/build/reports/androidTests/connected/*.xml